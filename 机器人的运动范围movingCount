#include<iostream>
#include<vector>
using namespace std;
int movingCount(int threshold, int rows, int cols); 
bool dfs(int i,int j,vector<vector<int> > &a,int threshold, int rows, int cols);
int countb(int x);
int main()
{
	cout<<movingCount(18,50,50)<<endl;
}
int movingCount(int threshold,int rows,int cols)
{
	if(threshold==0||rows<=0||cols<=0) return 0;
	vector<vector<int> > a(rows,vector<int>(cols,0));	//0表示没走过，1表示走过且可以走，2表示走过但不能走 
	dfs(0,0,a,threshold,rows,cols);
	int sum=0;
	for(int i=0;i<rows;i++)
		for(int j=0;j<cols;j++)
			if(a[i][j]==1)	sum++;
	for(int i=0;i<rows;i++)
	{
		for(int j=0;j<cols;j++)
			cout<<a[i][j];
		cout<<'\n';
	}	
	return sum;
}
bool dfs(int i,int j,vector<vector<int> > &a,int threshold, int rows, int cols)		//从i,j出发所能到达的点
{
	if(i<0||j<0||i>=rows||j>=cols||a[i][j]) return false;
	cout<<"i,j="<<i<<" "<<j<<endl;
	if(countb(i)+countb(j)<=threshold)
	{
		a[i][j]=1;
		dfs(i+1,j,a,threshold,rows,cols);
		dfs(i,j+1,a,threshold,rows,cols);
		dfs(i-1,j,a,threshold,rows,cols);
		dfs(i,j-1,a,threshold,rows,cols);
	}
	else
	{
		cout<<"cannot go "<<i<<" "<<j<<endl;
		a[i][j]=2;
		return false;
	}
	//return true;	c++11要求返回必须带真和假值（为了防止无返回，但本版本无要求） 
} 
int countb(int x)	//计算x的数位和 
{
	int sum=0;
	while(x)
	{
		sum+=x%10;
		x/=10;
	}
	return sum;
}
 
