#include<iostream>
#include<vector>
#include<cstring>
using namespace std;
bool hasPath(char* matrix, int rows, int cols, char* str);
bool dfs(int movex[4],int movey[4],vector<vector<int> > &a,int i,int j,int matched,int length,char* matrix,int rows, int cols, char* str);
int main()
{
	char* matrix="abtgcfcsjdeh";int rows;int cols;char* str="bfce";
	//cin>>matrix>>rows>>cols>>str;								错误1，matrix和str内容不能修改，因为他指向常量
	cout<<hasPath(matrix,3,4,str)<<endl;
}
//递归版本，从i，j开始已经匹配了matched个字符
	bool dfs(int movex[4],int movey[4],vector<vector<int> > &a,int i,int j,int matched,int length,char* matrix,int rows, int cols, char* str)
	{ 
		if(matched==length) return true;
		a[i][j]=1;
		cout<<"a="<<i<<j<<endl;
		int ni,nj;
		for(int k=0;k<4;k++)
		{
			ni=i+movex[k]; nj=j+movey[k];						//将要走的下一步 
			cout<<"ni="<<ni<<nj<<endl;
			//if(!a[ni][nj]&&ni>=0&&ni<rows&&nj>=0&&nj<cols)	//由于&&的从左往右性，!a[ni][nj]其实已经下标溢出,ni>=0已经不会执行 
			if(ni>=0&&ni<rows&&nj>=0&&nj<cols&&!a[ni][nj])
			{
				//cout<<"clear1"<<endl;
				//cout<<matrix[ni*cols+nj]<<"=="<<str[matched]<<endl;
				if(matrix[ni*cols+nj]==str[matched])		//判断下一步是否能走 
				{
					//cout<<"clear2"<<endl;
					if(dfs(movex,movey,a,ni,nj,matched+1,length,matrix,rows,cols,str)) return true;
				}			
			}				
		}
		a[i][j]=0;
		return false;
	}
	bool hasPath(char* matrix,int rows,int cols,char* str)//思考这里的&str与实际参的&str是否相同：ans不同，仍然是有副本 
	{
		
        if(str==NULL) return false;
        //更严格的边界时if(str==nullptr||rows<1||cols<1||str==nullptr),也就是接口的四个参数 
        const int asize=rows*cols;
        vector<vector <int> > a(rows,vector<int>(cols,0));	//注意这个参数的理解 
        char t=str[0];
        int length=strlen(str); 								 
        //cout<<length<<endl;
		/*
		1.m*n的二维vector，所有元素初始化为0,注意vector二维数组的定义连个>>中间要有空格 	vector<vector <int> > a(m,vector<int>(n,0));		
    	2.直接初始化 				vector<vector<int> >num = { {1,1,1,0,1,1},{1,0,1,1,1,1},{1,1,1,0,0,1},{1,0,1,0,0,1},{1,1,1,1,1,1} }; */ 
        int movex[4]={-1,0,1,0};
		int movey[4]={0,1,0,-1}; 
        /* 
		for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            	cout<<matrix[i*rows+j];
            cout<<endl;
		}*/
		for(int i=0;i<rows;i++)
			for(int j=0;j<cols;j++)
    			if(matrix[i*cols+j]==t)
    			{
    				cout<<i<<j<<endl; 
            		if(dfs(movex,movey,a,i,j,1,length,matrix,rows,cols,str)) return true;
    			}		
        return false;
    }
