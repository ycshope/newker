#include<iostream>
#include<cstring>
using namespace std;
bool match(char* str, char* pattern);
bool matchst(char* str,char* pattern,int slen,int plen); 
/*
请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任
意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹
配，但是与"aa.a"和"ab*a"均不匹配

如果不包含任何 . * 则直接匹配，接下来考虑“.”作为通配字符，再考虑"*"，从后往前匹配
"*"包含两种可能，一种是删除字符，另一种是增加字符。
如果："*"前面的字符与母串不匹配，那么就只能删除
	如果"*"前面的字符与母串匹配，那么就需要考虑增加字符 
*/
int main()
{
	char *str="a";
	char *pattern=".*";
	cout<<match(str,pattern)<<endl;
	
}
/*
边界条件1： 
	char *str="";
	char *pattern=".*";
边界条件2： 
	char *str="a";
	char *pattern=".*";
*/ 
bool match(char* str, char* pattern)
{
	if(str==NULL||pattern==NULL) return false;
	return matchst(str,pattern,strlen(str),strlen(pattern));
}
bool jug(char* str,char* pattern,int i,int j)			//判断 str[i]和pattern[j]是否匹配 
{
	return str[i]==pattern[j]||pattern[j]=='.';
} 
bool matchst(char* str,char* pattern,int slen,int plen) //str,pattern分别匹配 slen，plen个字符没有匹配  
{
	cout<<"now is slen"<<slen<<" plen"<< plen<<endl;
	if(!slen&&!plen) return true;									//递归出口 1.两个都匹配完 
	//if((!slen&&plen)||(slen&&!plen)) return false;					// 递归出口  2.其中一个没匹配完  问题：边界条件1 
	if(slen&&!plen) return false;		
	if(jug(str,pattern,slen-1,plen-1))		//情况1.遇到相同字符或者通配字符：则直接匹配 
	{
		cout<<"匹配成功"<<endl;
		return matchst(str,pattern,slen-1,plen-1); 
	} 
	else														 
	{
		if(pattern[plen-1]!='*')							//情况2.是非通配字符也不是“*”字符，完全没办法匹配 
		{
			cout<<"匹配失败"<<endl;
			return false;
		} 
		else												//情况3.是"*"字符，那么"*"前面的字符循环0次到无限次 
		{	
			if(plen-2>=0&&matchst(str,pattern,slen,plen-2)) return true;
			//if(plen>=0&&(plen-2>=0&&(str[slen-1]==pattern[plen-2]||pattern[plen-2]=='.'))) return matchst(str,pattern,slen-1,plen)
			if(plen-1>=0&&matchst(str,pattern,slen,plen-1)) return true;
			if(plen-2>=0&&jug(str,pattern,slen-1,plen-2)&&matchst(str,pattern,slen-1,plen)) return true;
			return false;
		}
	}
}
